dotnet new sln    => yeni solution yaptık

dotnet new webapi -o API    =>   yeni web api yaptık

dotnet sln add API     =>  API yi solution içerisine ekledik.

dotnet sln list  =>  Solution içerisindeki dosyaları görmek için

dotnet dev-certs https  =>  güvenilir sertifikayı kullanır.

dotnet tool install --global dotnet-ef 
dotnet tool update --global dotnet-ef

dotnet ef migrations add InitialCreate -o Data/Migrations  => İlk migrations yap
dotnet ef migrations remove



dotnet new classlib -o Infrastructure  => Ana dizinde yeni bir katman oluşturmak için kullan 
dotnet sln add Infrastructure  => Oluşturduğumuz katmanı çözüme ekledik.
api>dotnet add reference ../Infrastructure  => Api katmanına girip referans olarak ekledik.

infrastructure>dotnet add reference ../Core    =>  Infrastructure katmanına girip referans olarak ekledik.

dotnet restore  => yeniden yükledik


//// git /////
git status   => git durumunu kontrol et
git init     => git oluştur.
new file >  .gitignore isimli dosyayı oluştur.
github web sitesine giderek repository oluştur.
git remote add origin https://github.com/SafakTulukas/deneme.git  => git içerisindeki adresi ayarla
isim verip commit oluştur. pull to ile gönder
/////////////////



/// Katmanlı mimaride infrastructure projesinda data/migrations klasörüne yazıyoruz. Starter projesi API
dotnet ef migrations add InitialCreate -p infrastructure -s API -o Data/Migrations

///
dotnet ef migrations remove -p infrastructure -s API


/// Excel dosyasını csv ye çevir. Sonra csv ye sağ tıkla not defterinde aç
ardından https://csvjson.com sitesinde onları json dosyaya çevir.

///////////////////////////////////////////////////////////////////////////////////////////


// Hata kontrolünü ele almak //

API/Errors altında
 ApiResponse class oluştur.
 ApiException class oluştur.
ErrorController oluştur.
Middleware/ ExceptionMiddleware oluştur.
startup altında => app.UseMiddleware<ExceptionMiddleware>();
                   app.UseStatusCodePagesWithReExecute("/errors/{0}");
Errors/ApiValidationErrorResponse class oluştur
startup içinde validation hataları için gereken kodu yaz.


///////////////////////////////////////////////////////////////////////////////////////////

// Swagger çalışması için 
ErrorController içine    [ApiExplorerSettings(IgnoreApi = true)]  attribute ekledik. Bunu swagger da görünmesin diye yaptık.


////////////////////////////////////////////////////////////////////////////////////////////
SSL Sertifika kullanımı
ssl klasörünü oluşturup içerisine sertifikayı kopyaladık
bilgisayara server.crt yi kurduk
Angular.json içerisine aşağıdaki 3 satırı ekledik.
    "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",          
          "options": {
            "browserTarget": "client:build",
        =>    "sslKey": "ssl/server.key",
        =>    "sslCert": "ssl/server.crt",
        =>    "ssl": true
          },

///////////////////////////////////////////////////////////////////////////////////////
Bootstrap  => ngx-Bootstrap
    https://valor-software.com/ngx-bootstrap/#/documentation#getting-started
    => ng add ngx-bootstrap 

Font-Awesome  =>  npm install font-awesome
                  "./node_modules/font-awesome/css/font-awesome.min.css",

//////////////////////////////////////////////////////////////////////////////////////
Model kopyalama
  Swagger içinden modelin kopyasını al
  http://www.jsontots.com adresinden json haline çevir.

////////////////////////////////////////////////////////////////////////////////////
Interceptor eklediğin zaman app.module /  provider bölümüne de eklemeyi unutma

///////////////////////////////////////////////////////////////////////////////////
npm install ngx-toastr
modül içerisine ekledik => ToastrModule.forRoot({
                              positionClass: 'toast-bottom-right',
                              preventDuplicates:true
                            })
angular.json içerisine => "./node_modules/ngx-toastr/toastr.css"

////////////////////////////////////////////////////////////////////////////////////
xng-breadcrumb
npm install --save xng-breadcrumb
CoreModule içerisine =>  BreadcrumbModule  eklemeyi unutma
app-routing  içerisine   data :{breadcrumb: 'Test Errors'}  yönlendirmeleri eklemeyi unutma

 => section-header.html  içerisine  <xng-breadcrumb></xng-breadcrumb> eklersen görünür

 => Product Detail alabilmek için 
    shop-routing içerisine data: { breadcrumb: { alias: 'productDetails' } 
    product-details.ts içerisine service ekle  private bcService:BreadcrumbService  ekle
    ürün yüklenirken alias adını ayarla this.bcService.set('@productDetails', product.name);
  
 => style.css eklemelerini yap

 ////////////////////////////////////////////////////////////////////////////////////
 npm install bootswatch
  => angular.json içerisine  "./node_modules/bootswatch/dist/sketchy/bootstrap.min.css",  ekle

/////////////////////////////////////////////////////////////////////////////////////
LOADING 
npm install ngx-spinner
  =>  app.module  içerisine  NgxSpinnerModule ekle
  =>  app.componenet.html içerisine 
      <ngx-spinner>
        <h3>Loading...</h3>
      </ngx-spinner>
  => core/services altında busy servisini oluştur
      ng g s busy --flat --skip-tests  oluştur
  => core/interceptors altında  
      loading.interceptor.ts dosyasını oluştur.
  => app.module içerisine 
       { provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true } ekle

/////////////////////////////////////////////////////////////////////////////////////
Home page / Carousel 
  => CarouselModule ekledik.   ngx-bootstrap içerisinden ekledik
  => Home/home.module içerisine shared.module ekledik.

/////////////////////////////////////////////////////////////////////////////////////
REDIS Kullanmak

nuget paket yöneticisi içinden => StackExchange.Redis  => Infrastructure içerisine kurduk.
API / startup => servisi eklemeyi unutma

using StackExchange.Redis;

  services.AddSingleton<ConnectionMultiplexer>(c =>{
                var configuration = ConfigurationOptions.Parse(_config.GetConnectionString("Redis"),true);
                return ConnectionMultiplexer.Connect(configuration);
            });

////////////////////////////////////////////////////////////////////////////////////
uuid kurmak,  guid için kullanacağız. Redis server da guid id ile basket içerisine
eklenenleri kayıt yapacağız.

   => npm install uuid

///////////////////////////////////////////////////////////////////////////////////
Identity Kullanmak / Infrasucture projesi içerisine kurduk

  =>Nuget => Microsoft.AspNetCore.Identity
             Microsoft.AspNetCore.Identity.EntityFrameworkCore
             Microsoft.IdentityModel.Tokens 
             System.IdentityModel.Tokens.Jwt 

            / API projesine kurduk
             Microsoft.AspNetCore.Authentication.JwtBearer

            / Core projesine kurduk
             Microsoft.Extensions.Identity.Stores

  => Core/Entities/Identity altında nesneleri oluşturduk
  => Infrastructure/Identity altında AppIdentityDbContext oluşturduk
  => Startup ve appsettings içinde dbcontext bağlantısını tanımladık
  => dotnet ef migrations add IdentityInitial -p Infrastructure -s API -o Identity/Migrations -c AppIdentityDbContext
  =>  Silmek istersen dotnet ef migrations remove -p Infrastructure -s API -c AppIdentityDbContext  

  => Seed database Program.cs içerisine ekle

  => AccountController içerisinde login register yazdık

  // Core/Interfaces  => ITokenService oluşturuldu
  // Infrastructure/Services  => TokenService oluşturuldu
  // API/Extensions/IdentityServiceExtensions içerisinde Authentication yöntemini ayarla

  // AccountController / UserManager için extension yazdık. Çünkü Adres bilgisini almak için include komutunu kullanamıyoruz.

  //////////////////////////////////////////////////////////////////////////////////
  validation

     => Model validation  
        registerDto/   https://regexlib.com/  altından arama bölümüne  "password" yazarak regex ifadesini bulabilirsin

    => Swagger / AccountController için SwaggerService ekleme yaptık  
        securitySchema ekledik
        Bu sayede swagger da authorize olmadan account bilgisini göremeyiz
  
  ////////////////////////////////////////////////////////////////////////////////////
  Identity client tarafında yapılması
    => ng g m account
    => ng g m account-routing --flat
    => ng g s accıunt --flat --skip-tests
    => ng g c login --skip-tests
    => ng g c register --skip-tests 

    - Önce routing module den başla
    - account module içerisine routing eklemeyi unutma
    - app-routing içerisine eklemeyi yap

    - Ardından modelleri ekle
    - model/ user.ts,  address.ts

    - account.service içinde gerekenleri yaz

    - Reactive Form kullanacağız  
        - login form ekledik
        - shared module içerisine reactiveformmodule ekledik
        - account module içeriine shared module ekledik
        - Login Form içerisine eklemelerini yaptık.
    - Navbar componenet ts içerisine behaviour subject ten gelen datayı aldık.

    - loadCurrentUser ile token kullanarak var olan kullanıcının bilgilerini aldım. 
      app.component.ts içerisine bunları yazacağım. Böylece siteye tekrar geldiğimde site kullanıcıyı tanıyacak

    - https://valor-software.com/ngx-bootstrap/#/dropdowns  dropdown menüyü aldık
      sharedModule içerisine BsDropdownModule.forRoot()  ekledik
      navbar.html içinde dropdown ekledik.

    - client validation
      https://regexlib.com/ içinden email için pattern aldık   ^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$

    - Reusable Text Input için shared içinde bir component yaptık
      ng g c text-input --skip-tests
      text-input.components  ControlValueAccessor implement edeceğiz
      ardından form alanlarında artık app-text-input kullanıyoruz.

    - Register Form
      Email var mı yok mu ? kontrolünü yapmak
      validateEmailNotTaken()
    
    - Email doğrulamayı async yapmak 
      text-input.component içerisine ekleme yaptık
    
    - AuthGuard
      app/core altında guards klasörü oluştur.
      app-routing içerisine AuthGuard olması gereken sayfalara ekledik
      login.component.ts içerisine returnUrl yakaladık
      *** account.service kullanıcıyı  ReplaySubject  olarak değiştirdik.